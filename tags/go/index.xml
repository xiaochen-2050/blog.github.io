<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Xiao.chen</title>
    <link>https://blog.wisekee.com/tags/go/</link>
    <description>Recent content in Go on Xiao.chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2020, Xiao.chen; all rights reserved.</copyright>
    <lastBuildDate>Sat, 09 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.wisekee.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to config debug the go project in vscode</title>
      <link>https://blog.wisekee.com/post/go-vscode-debug-config/</link>
      <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/go-vscode-debug-config/</guid>
      <description>
        
          
            To debug the go project has many method to achieve it
The config file specific the program arguments 1{ 2 // Use IntelliSense to learn about possible attributes. 3 // Hover to view descriptions of existing attributes. 4 // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 5 &amp;#34;version&amp;#34;: &amp;#34;0.2.0&amp;#34;, 6 &amp;#34;configurations&amp;#34;: [ 7 { 8 &amp;#34;name&amp;#34;: &amp;#34;cmd-name&amp;#34;, 9 &amp;#34;type&amp;#34;: &amp;#34;go&amp;#34;, 10 &amp;#34;request&amp;#34;: &amp;#34;launch&amp;#34;, 11 &amp;#34;mode&amp;#34;: &amp;#34;auto&amp;#34;, 12 &amp;#34;program&amp;#34;: &amp;#34;src/cmd/main.go&amp;#34;, 13 &amp;#34;args&amp;#34;: [&amp;#34;aws&amp;#34;, &amp;#34;ecr&amp;#34;, &amp;#34;create-repository&amp;#34;, &amp;#34;--repository-name&amp;#34;, &amp;#34;test/repository&amp;#34;] 14 } 15 ] 16} Set the environment variables 1{ 2 // Use IntelliSense to learn about possible attributes.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Use golang serve the static file embedded to binary file</title>
      <link>https://blog.wisekee.com/post/golang-web-static-fileserver/</link>
      <pubDate>Wed, 08 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/golang-web-static-fileserver/</guid>
      <description>
        
          
            The golang code to embed file to compile file use the annotatioins to embed folder, this should embed current public folder to binary file
1 2import ( 3	&amp;#34;embed&amp;#34; 4 &amp;#34;fmt&amp;#34; 5 &amp;#34;os&amp;#34; 6 &amp;#34;io/fs&amp;#34; 7	&amp;#34;net/http&amp;#34; 8 &amp;#34;os/signal&amp;#34; 9	&amp;#34;runtime&amp;#34; 10	&amp;#34;strings&amp;#34; 11	&amp;#34;syscall&amp;#34; 12) 13 14 15//go:embed public 16var staticFiles embed.FS 17 18 19func main() { 20 public, _ := fs.Sub(staticFiles, &amp;#34;public&amp;#34;) 21	// handle static files include HTML, CSS and JavaScripts.
          
          
        
      </description>
    </item>
    
    <item>
      <title>How to profile the golang program</title>
      <link>https://blog.wisekee.com/post/golang_profile/</link>
      <pubDate>Wed, 11 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/golang_profile/</guid>
      <description>
        
          
            For checkout the resources usage in golang, this is simple
Add the profile code in app 1// Add the flag to arguments to cpu and memory ptoto buffer file store to it 2	rootCmd.PersistentFlags().StringP(&amp;#34;cpuprofile&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;cpu profile file&amp;#34;) 3	rootCmd.PersistentFlags().StringP(&amp;#34;memprofile&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;memory profile file&amp;#34;) 4// whether enable profile 5func enableProfile() { 6	cpu, _ := rootCmd.Flags().GetString(&amp;#34;cpuprofile&amp;#34;) 7	mem, _ := rootCmd.Flags().GetString(&amp;#34;memprofile&amp;#34;) 8	if cpu != &amp;#34;&amp;#34; { 9	f, err := os.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Generation and Verify JWT token in golang</title>
      <link>https://blog.wisekee.com/post/golang-jwt-example/</link>
      <pubDate>Sun, 08 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/golang-jwt-example/</guid>
      <description>
        
          
            Use HS256 or RS256 to sign and authorization is common JWT methods
Create the JWT token 1package util 2 3import &amp;#34;github.com/golang-jwt/jwt/v5&amp;#34; 4 5// retrieve JWT key from .env file 6var privateKey = []byte(os.Getenv(&amp;#34;JWT_PRIVATE_KEY&amp;#34;)) 7 8// generate JWT token 9func GenerateJWT(user model.User) (string, error) { 10	tokenTTL, _ := strconv.Atoi(os.Getenv(&amp;#34;TOKEN_TTL&amp;#34;)) 11	//log.Println(time.Now()) 12	//log.Println(time.Now().Add(time.Second * time.Duration(tokenTTL))) 13	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{ 14	&amp;#34;id&amp;#34;: user.ID, 15	&amp;#34;role&amp;#34;: user.RoleID, 16	&amp;#34;iat&amp;#34;: time.Now().Unix(), 17	&amp;#34;eat&amp;#34;: time.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Concurrency patterns in golang</title>
      <link>https://blog.wisekee.com/post/golang-concurrency-patterns/</link>
      <pubDate>Fri, 08 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/golang-concurrency-patterns/</guid>
      <description>
        
          
            Use for loop and ticker 1// someTask function that we call periodically. 2func someTask() { 3 fmt.Println(rand.Int() * rand.Int()) 4} 5 6// PeriodicTask runs someTask every 1 second. 7// If canceled goroutine should be stopped. 8func PeriodicTask(ctx context.Context) { 9 // Create a new ticker with a period of 1 second. 10 ticker := time.NewTicker(time.Second) 11 for { 12 select { 13 case &amp;lt;-ticker.C: 14 someTask() 15 case &amp;lt;-ctx.Done(): 16 fmt.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Grpc example and getting started</title>
      <link>https://blog.wisekee.com/post/grpc-getting-started/</link>
      <pubDate>Sun, 11 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/grpc-getting-started/</guid>
      <description>
        
          
            Create the structure 1mkdir myapp 2cd myapp &amp;amp;&amp;amp; go mod init myapp 3go mod tidy The steps Create the proto file descript the message 1syntax = &amp;#34;proto3&amp;#34;; 2package proto; 3 4option go_package = &amp;#34;./proto&amp;#34;; 5 6//A sample service which contains all our rpc. 7service MyService{ 8 //The definition of rpc. 9 rpc MyFunc(Request) returns (StringMessage) {} 10} 11 12//Empty Request. 13message Request { 14} 15 16//The message to Return when rpc is invoked.
          
          
        
      </description>
    </item>
    
    <item>
      <title>How to call to kubernets grpc services in local</title>
      <link>https://blog.wisekee.com/post/grpc-awesome/</link>
      <pubDate>Thu, 11 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/grpc-awesome/</guid>
      <description>
        
          
            Usually for serivce better performance. we can use GRPC and multiple instance deployment for app, then the GRPC load balancing is challenges
Create Grpc headless service for Grpc app when multiple instance is enable for GRPC service in order to load balacing the GRPC service, needs create headless service let client load balancing
1apiVersion: v1 2kind: Service 3metadata: 4 name: grpc-demo-headless 5 namespace: apps 6spec: 7 ports: 8 - name: tcp-30555 9 protocol: TCP 10 port: 30555 11 targetPort: 30555 12 selector: 13 app: grpc-demo-app 14 clusterIP: None 15 type: ClusterIP Use Envoy proxy the headless service implementation load balancing deploy the envoy proxy 1apiVersion: apps/v1 2kind: Deployment 3metadata: 4 name: envoy-proxy-grpc-demo 5 namespace: apps 6 labels: 7 app: envoy-proxy-grpc-demo 8spec: 9 replicas: 1 10 selector: 11 matchLabels: 12 app: envoy-proxy-grpc-demo 13 template: 14 metadata: 15 labels: 16 app: envoy-proxy-grpc-demo 17 sidecar.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Go language private registry glance</title>
      <link>https://blog.wisekee.com/post/go-private-package-registry-athens/</link>
      <pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/go-private-package-registry-athens/</guid>
      <description>
        
          
            Setup GO private package repositry ATHENS for project development Use Nexus proxy access public go package and private repository repo
1#The access workflow 2 3 |------&amp;gt; proxy-public internal 4internal.pack.com/goproxy---&amp;gt;nexus 5 |------&amp;gt;athens---&amp;gt;nginx---&amp;gt; private gitlab The pull package workflow - set the environment variable `export GOPROXY=internal.pack.com/goproxy`- setup nexus proxy the internal athens and public go proxy repo- the athens access internal gitlab code repo needs nginx rewrite the some paths- because athens needs https access the code repoGenerate the private certificate 1openssl req -x509 -nodes -days 876000 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Scheduler clean up kubernetes unuseful resources</title>
      <link>https://blog.wisekee.com/post/schedule-cleanup-k8s-resources/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/schedule-cleanup-k8s-resources/</guid>
      <description>
        
          
            Prepare Golang program code use clean up unused pods and replicaset resources in kubernetes we can clean up not running status pods and deactive replicasets
initialization Go lanugage project evnironment 1	mkdir k8s_res_cleanup &amp;amp;&amp;amp; cd k8s_res_cleanup 2	go mod init example.com/cleanup/resources 3	go get -v -u k8s.io/client-go@v0.18.2 # install packages 4	go get -v -u github.com/prometheus/common@v0.1.0 create sub packageconfig/k8s.go indicate how can connect to kubernetes cluster 1package config 2 3import ( 4	&amp;#34;flag&amp;#34; 5	logs &amp;#34;github.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Go language frequently used command notes</title>
      <link>https://blog.wisekee.com/post/go-usually-commands/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/go-usually-commands/</guid>
      <description>
        
          
            Global install go program(go version &amp;gt;=1.16.0) go install sigs.k8s.io/kind@v0.9.0 when go version is higher 1.12 should install godoc command go get golang.org/x/tools/cmd/godoc launch go docs services in local godoc -http=:6060 view go environment variables,inlude GO ROOT path go env fmt package Println docs go doc fmt Println initialization go modules, when reference sub directory straightway example.com/module/sub1/sub2 go mod init example.com/module delete packages go clean -i -v -x github.com/somepkg/go/simpleGitHub Add modules to current packages go mod edit -require github.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
