<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>monitoring on Xiao.chen</title>
    <link>https://blog.wisekee.com/tags/monitoring/</link>
    <description>Recent content in monitoring on Xiao.chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2020, Xiao.chen; all rights reserved.</copyright>
    <lastBuildDate>Tue, 02 Jul 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.wisekee.com/tags/monitoring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ElasticSearch monitoring and  alert base on ElastAlert</title>
      <link>https://blog.wisekee.com/post/elastalert-usage/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/elastalert-usage/</guid>
      <description>
        
          
            Dynamically generate alarm rules and send email to relative people.based on a given parameter or configuration Elastalert
The directory construct look following 1├── elastalert 2├── generate_rule.py 3├── param.json 4├── rules 5└── template You can also through pip install elastalert installing elastalert package. I&amp;rsquo;m going to use it directly here The templatedirectory store tpl file, use this template generate some rules file to rules directory. and used elastalert
Configuration file param.json 1{ 2 &amp;#34;dev&amp;#34;: { 3 &amp;#34;public_config&amp;#34;: { 4 &amp;#34;run_every&amp;#34;: 5, 5 &amp;#34;buffer_time&amp;#34;: 15, 6 &amp;#34;es_host&amp;#34;: &amp;#34;dev.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Use AWS CSM to monitoring the api call in your service</title>
      <link>https://blog.wisekee.com/post/aws-client-side-monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/aws-client-side-monitoring/</guid>
      <description>
        
          
            Enable the aws CSM for application specific the following Environment Variables 1export AWS_CSM_ENABLED=true # or config the `~/.aws/config` include `csm_enabled = true` 2export AWS_CSM_HOST=10.0.0.1 # to send message to udp host 3export AWS_CSM_PORT=31000 # the CSM host port to listener 4export AWS_CSM_CLIENT_ID=appName # to set an identifier to differentiate multiple processes you might have configured to send to the same listener. Receive the message from client in local testing 1nc -luv localhost 31000 Receive the message from client use go code 1package main 2 3import ( 4	&amp;#34;encoding/json&amp;#34; 5	&amp;#34;fmt&amp;#34; 6	&amp;#34;log&amp;#34; 7	&amp;#34;net&amp;#34; 8	&amp;#34;os&amp;#34; 9	&amp;#34;os/signal&amp;#34; 10	&amp;#34;runtime&amp;#34; 11	&amp;#34;strconv&amp;#34; 12	&amp;#34;strings&amp;#34; 13	&amp;#34;syscall&amp;#34; 14) 15 16// ActionMessage is a struct representing a message from CSM 17type ActionMessage struct { 18	Version int `json:&amp;#34;Version&amp;#34;` 19	ClientID string `json:&amp;#34;ClientId&amp;#34;` 20	Type string `json:&amp;#34;Type&amp;#34;` 21	Service string `json:&amp;#34;Service&amp;#34;` 22	Action string `json:&amp;#34;Api&amp;#34;` 23	Timestamp int `json:&amp;#34;Timestamp&amp;#34;` 24	AttemptLatency int `json:&amp;#34;AttemptLatency&amp;#34;` 25	Fqdn string `json:&amp;#34;Fqdn&amp;#34;` 26	UserAgent string `json:&amp;#34;UserAgent&amp;#34;` 27	AccessKey string `json:&amp;#34;AccessKey&amp;#34;` 28	Region string `json:&amp;#34;Region&amp;#34;` 29	HTTPStatusCode int `json:&amp;#34;HttpStatusCode&amp;#34;` 30	FinalHTTPStatusCode int `json:&amp;#34;FinalHttpStatusCode&amp;#34;` 31	XAmzRequestID string `json:&amp;#34;XAmzRequestId&amp;#34;` 32	XAmzID2 string `json:&amp;#34;XAmzId2&amp;#34;` 33} 34 35func listen(connection *net.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
