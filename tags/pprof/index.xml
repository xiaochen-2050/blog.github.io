<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PProf on Xiao.chen</title>
    <link>https://blog.wisekee.com/tags/pprof/</link>
    <description>Recent content in PProf on Xiao.chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2020, Xiao.chen; all rights reserved.</copyright>
    <lastBuildDate>Wed, 11 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.wisekee.com/tags/pprof/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to profile the golang program</title>
      <link>https://blog.wisekee.com/post/golang_profile/</link>
      <pubDate>Wed, 11 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/golang_profile/</guid>
      <description>
        
          
            For checkout the resources usage in golang, this is simple
Add the profile code in app 1// Add the flag to arguments to cpu and memory ptoto buffer file store to it 2	rootCmd.PersistentFlags().StringP(&amp;#34;cpuprofile&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;cpu profile file&amp;#34;) 3	rootCmd.PersistentFlags().StringP(&amp;#34;memprofile&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;memory profile file&amp;#34;) 4// whether enable profile 5func enableProfile() { 6	cpu, _ := rootCmd.Flags().GetString(&amp;#34;cpuprofile&amp;#34;) 7	mem, _ := rootCmd.Flags().GetString(&amp;#34;memprofile&amp;#34;) 8	if cpu != &amp;#34;&amp;#34; { 9	f, err := os.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
