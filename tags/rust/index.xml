<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Xiao.chen</title>
    <link>https://blog.wisekee.com/tags/rust/</link>
    <description>Recent content in Rust on Xiao.chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2020, Xiao.chen; all rights reserved.</copyright>
    <lastBuildDate>Sat, 02 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.wisekee.com/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>First step to learn Rust programming</title>
      <link>https://blog.wisekee.com/post/rust-getting-started/</link>
      <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/rust-getting-started/</guid>
      <description>
        
          
            Basic knowledge &amp;amp;str is string literal To do the conversion use the standard String::from(&amp;amp;str) method also can use .to_string() String::from(&amp;quot;Something&amp;quot;) is string data type enum with structs 1// Define a tuple struct 2struct KeyPress(String, char); 3 4// Define a classic struct 5struct MouseClick { x: i64, y: i64 } 6 7// Redefine the enum variants to use the data from the new structs 8// Update the page Load variant to have the boolean type 9enum WebEvent { WELoad(bool), WEClick(MouseClick), WEKeys(KeyPress) } 10 11let we_load = WebEvent::WELoad(true); Project manage commands Cargo commands cargo new to create new project cargo build to build a project cargo run to build and run project cargo test Test a project cargo check Check project types cargo doc Build documentation for a project cargo publish Publish a library to crates.
          
          
        
      </description>
    </item>
    
    <item>
      <title>How to use Tauri development the GUI app</title>
      <link>https://blog.wisekee.com/post/how_to_use_tauri/</link>
      <pubDate>Mon, 20 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/how_to_use_tauri/</guid>
      <description>
        
          
            The prerequisites Install rust Reference offical site Install the Create-tauri-app Follow the tutorial step by step to create new Tauri project 1cargo install create-tauri-app --locked 2cargo create-tauri-app Select the Frontend language: TypeScript / JavaScript 1 2# Project name · tauri-app 3# ✔ Identifier · com.tauri-app.app 4# ✔ Choose which language to use for your frontend · TypeScript / JavaScript - (pnpm, yarn, npm, deno, bun) 5# ✔ Choose your package manager · pnpm 6# ✔ Choose your UI template · Vue - (https://vuejs.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Getting started rust development</title>
      <link>https://blog.wisekee.com/post/gettting-started-rust/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wisekee.com/post/gettting-started-rust/</guid>
      <description>
        
          
            The sample is: rustup doc in local
Environment setup 1curl --proto &amp;#39;=https&amp;#39; --tlsv1.3 -sSf https://sh.rustup.rs | sh 2rustup component add rust-src rust-analyzer rust-analysis 3# update the rust binary 4rustup update 5# uninstall the rust and rustup self 6rustup self uninstall 7 8rustc -V 9cargo -V Basic commands 1rustc --version 2cargo --version 3 4# crate the cargo project 5cargo new exercise 6cd exercise 7cargo run 8 9# to fast check 10cargo check 11# build 12cargo build --release 13# to debug 14cargo run 15# to debug build 16cargo build 17# to fromat the code 18rustfmt .
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
